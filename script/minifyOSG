#!/usr/bin/python

# Script to minify OpenSceneGraph distribution into a pair of header/source files:
# * OpenSceneGraph.h
# * OpenSceneGraph.cpp
# This is useful for easily embedding OpenSceneGraph under platforms like Android, iOS, and Emscripten.

import glob
import sys

CMD_HELP = """
Usage: {0} /path/to/generated/OSG/includes /path/to/OSG <OSG_libraries_to_include_without_OpenThreads>

Example:
    {0} /home/kornerr/OpenSceneGraph/build/include /home/kornerr/OpenSceneGraph osg osgDB osgGA osgShadow osgText osgUtil osgViewer
"""

HEADER = "OpenSceneGraph.h"
SOURCE = "OpenSceneGraph.cpp"
WARNING = "\n\n// ! This file has been autogenerated by `minifyOSG` script. DO NOT EDIT it manually !\n\n"

ARGUMENTS_COUNT = len(sys.argv)
LIBS_ARGUMENT_START_POS = 3

# Validate command line input parameters.
if (ARGUMENTS_COUNT < LIBS_ARGUMENT_START_POS):
    print(CMD_HELP.format(sys.argv[0]))
    sys.exit(0)

DIR_GEN_OSG = sys.argv[1]
DIR_OSG = sys.argv[2]
LIBS = []
for i in range(LIBS_ARGUMENT_START_POS, ARGUMENTS_COUNT):
    LIBS.append(sys.argv[i])

def generatedIncludes(dirGen):
    fileNames = [
        "OpenThreads/Config",
        "OpenThreads/Version",
        "osg/Config",
        "osg/GL",
        "osg/Version",
    ]
    contents = "\n\n//Generated OpenSceneGraph includes\n\n"
    for fileName in fileNames:
        filePath = dirGen + "/" + fileName
        with open(filePath, "r") as f:
            contents += "#include \"{0}\"\n".format(filePath)
    return contents

def includes(dirOSG, libName):
    contents = "\n\n// {0} includes\n\n".format(libName)
    libDir = dirOSG + "/include/" + libName
    fileNames = glob.glob(libDir + "/*")
    for fileName in fileNames:
        contents += "#include \"{0}\"\n".format(fileName)
    return contents

def sources(dirOSG, libName):
    contents = "\n\n// {0} sources\n\n".format(libName)
    libDir = dirOSG + "/src/" + libName
    fileNames = glob.glob(libDir + "/*.cpp")
    for fileName in fileNames:
        contents += "#include \"{0}\"\n".format(fileName)
    return contents

# Header and source stubs.
headerContents = [
    WARNING,
    generatedIncludes(DIR_GEN_OSG),
    includes(DIR_OSG, "OpenThreads"),
]
sourceContents = [
    WARNING,
    sources(DIR_OSG, "OpenThreads/common"),
    sources(DIR_OSG, "OpenThreads/pthreads"),
]


# Save header.
with open(HEADER, "w") as f:
    contents = "\n".join(headerContents)
    f.write(contents)
# Save source.
with open(SOURCE, "w") as f:
    contents = "\n".join(sourceContents)
    f.write(contents)

